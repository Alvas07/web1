const canvas = document.querySelector('.graph canvas');
const ctx = canvas.getContext('2d');

const xGroup = document.getElementById('xGroup');
const xGroupInputs = xGroup.querySelectorAll('input');
const yInput = document.getElementById('yInput');
const rButtons = document.querySelectorAll('.r-button');
const form = document.getElementById('coordsForm');
const historyTbody = document.getElementById('history');
const clearHistoryBtn = document.getElementById('clearHistory');
const themeToggle = document.getElementById('themeToggle');

let selectedR = 1;
const AXIS_MIN = -6;
const AXIS_MAX = 6;

let points = []; // –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫

// === –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π canvas ===
function resizeCanvas() {
  const dpr = window.devicePixelRatio || 1;
  const rect = canvas.getBoundingClientRect();
  canvas.width = rect.width * dpr;
  canvas.height = rect.height * dpr;
  ctx.setTransform(1, 0, 0, 1, 0, 0);
  ctx.scale(dpr, dpr);
}

// === –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç ===
function scaleX(x) {
  const rect = canvas.getBoundingClientRect();
  return rect.width / 2 + x * (rect.width / (2 * AXIS_MAX));
}
function scaleY(y) {
  const rect = canvas.getBoundingClientRect();
  return rect.height / 2 - y * (rect.height / (2 * AXIS_MAX));
}

// === –æ—Å–∏ ===
function drawAxes() {
  const rect = canvas.getBoundingClientRect();
  const w = rect.width;
  const h = rect.height;

  ctx.strokeStyle = "#000";
  ctx.lineWidth = 1;

  // –æ—Å—å X
  ctx.beginPath();
  ctx.moveTo(0, h / 2);
  ctx.lineTo(w, h / 2);
  ctx.stroke();

  // –æ—Å—å Y
  ctx.beginPath();
  ctx.moveTo(w / 2, 0);
  ctx.lineTo(w / 2, h);
  ctx.stroke();

  // –ø–æ–¥–ø–∏—Å–∏
  ctx.fillStyle = "#000";
  ctx.font = "12px Arial";
  for (let i = AXIS_MIN; i <= AXIS_MAX; i++) {
    if (i === 0) continue;
    ctx.fillText(i, scaleX(i), h / 2 - 5);
    ctx.fillText(i, w / 2 + 5, scaleY(i));
  }
}

// === –æ–±–ª–∞—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è ===
function drawArea() {
  const R = selectedR;
  ctx.fillStyle = "rgba(0,128,255,0.3)";

  // –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
  ctx.fillRect(scaleX(0), scaleY(0), scaleX(R / 2) - scaleX(0), scaleY(-R) - scaleY(0));

  // —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
  ctx.beginPath();
  ctx.moveTo(scaleX(-R), scaleY(0));
  ctx.lineTo(scaleX(0), scaleY(0));
  ctx.lineTo(scaleX(0), scaleY(-R / 2));
  ctx.closePath();
  ctx.fill();

  // —á–µ—Ç–≤–µ—Ä—Ç—å –∫—Ä—É–≥–∞
  ctx.beginPath();
  ctx.moveTo(scaleX(0), scaleY(0));
  ctx.arc(scaleX(0), scaleY(0), scaleX(R / 2) - scaleX(0), Math.PI, 1.5 * Math.PI, false);
  ctx.closePath();
  ctx.fill();
}

// === —Ç–æ—á–∫–∞ ===
function drawPoint(x, y, result) {
  ctx.beginPath();
  ctx.arc(scaleX(x), scaleY(y), 4, 0, 2 * Math.PI);
  ctx.fillStyle = result ? "green" : "red";
  ctx.fill();
}

// –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
function drawPoints() {
  points.forEach(p => drawPoint(p.x, p.y, p.result));
}

// === –∏—Å—Ç–æ—Ä–∏—è ===
function addHistoryItem(item) {
  const { x, y, r, result, now, exec_time } = item;
  const emoji = result ? "‚úîÔ∏è" : "‚ùå";

  const row = document.createElement("tr");
  row.className = result ? "history-item hit" : "history-item miss";
  row.innerHTML = `
    <td>${now}</td>
    <td>${emoji}</td>
    <td>${x}</td>
    <td>${y.toFixed(2)}</td>
    <td>${r}</td>
    <td>${exec_time} ms</td>
  `;
  historyTbody.prepend(row);

  // –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –º–∞–∫—Å–∏–º—É–º 10 –∑–∞–ø–∏—Å–µ–π
  while (historyTbody.children.length > 10) {
    historyTbody.removeChild(historyTbody.lastChild);
  }
}

// === —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
function saveState() {
  const selectedXs = [...xGroup.querySelectorAll("input:checked")].map(cb => parseFloat(cb.value));
  const state = {
    theme: document.body.classList.contains("dark") ? "dark" : "light",
    selectedR: selectedR,
    selectedXs: selectedXs,
    y: yInput.value,
    points: points
  };
  localStorage.setItem("hitCheckerState", JSON.stringify(state));
}

// === –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
function loadState() {
  const saved = localStorage.getItem("hitCheckerState");
  if (!saved) return;
  try {
    const state = JSON.parse(saved);
    if (state.theme === "dark") {
      document.body.classList.add("dark");
      themeToggle.textContent = "‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è";
    }
    if (state.selectedR) selectedR = state.selectedR;
    rButtons.forEach(btn => btn.classList.toggle("active", parseFloat(btn.dataset.r) === selectedR));
    if (state.selectedXs) {
      xGroupInputs.forEach(cb => {
        cb.checked = state.selectedXs.includes(parseFloat(cb.value));
        cb.parentElement.classList.toggle("active", cb.checked);
      });
    }
    if (state.y !== undefined) yInput.value = state.y;
    if (state.points) {
      points = state.points;
      historyTbody.innerHTML = "";
      points.slice(-10).reverse().forEach(p => addHistoryItem(p));
    }
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:", e);
  }
}

// === —Å–æ–±—ã—Ç–∏—è ===
xGroup.addEventListener("change", e => {
  if (e.target.tagName === "INPUT") {
    e.target.parentElement.classList.toggle("active", e.target.checked);
    saveState();
  }
});

yInput.addEventListener("input", () => {
  const y = parseFloat(yInput.value);
  if (isNaN(y) || y < -5 || y > 3) {
    yInput.classList.add("invalid");
  } else {
    yInput.classList.remove("invalid");
  }
  saveState();
});

rButtons.forEach(btn => {
  btn.addEventListener("click", () => {
    rButtons.forEach(b => b.classList.remove("active"));
    btn.classList.add("active");
    selectedR = parseFloat(btn.dataset.r);
    saveState();
    setupCanvas(); // –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –æ–±–ª–∞—Å—Ç–∏ + –æ—Å–µ–π + —Ç–µ–∫—É—â–∏—Ö —Ç–æ—á–µ–∫
  });
});

themeToggle.addEventListener("click", () => {
  document.body.classList.toggle("dark");
  themeToggle.textContent = document.body.classList.contains("dark") ? "‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è" : "üåô –¢—ë–º–Ω–∞—è";
  saveState();
});

// === —Ñ–æ—Ä–º–∞ ===
form.addEventListener("submit", async e => {
  e.preventDefault();

  const selectedXs = [...xGroup.querySelectorAll("input:checked")].map(cb => parseFloat(cb.value));
  const y = parseFloat(yInput.value);
  if (isNaN(y) || selectedXs.length === 0 || !selectedR) {
    alert("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω X, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Y –∏ –≤—ã–±–µ—Ä–∏—Ç–µ R.");
    return;
  }

  // —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ—á–∫–∏ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
  points = [];
  setupCanvas(); // –æ—á–∏—Å—Ç–∫–∞ –∫–∞–Ω–≤–∞—Å–∞ + –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –æ—Å–µ–π –∏ –æ–±–ª–∞—Å—Ç–∏

  for (const x of selectedXs) {
    try {
      const response = await fetch(`/api/check?x=${x}&y=${y.toFixed(2)}&r=${selectedR}`);
      if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
      const resultJSON = await response.json();

      const point = { 
        x, 
        y, 
        result: resultJSON.result,
        now: resultJSON.now,
        exec_time: resultJSON.exec_time,
        r: selectedR
      };

      points.push(point);           // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—á–∫—É
      drawPoint(x, y, resultJSON.result); // —Ä–∏—Å—É–µ–º —Ç–æ—á–∫—É
      addHistoryItem(point);        // –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      saveState();                  // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", err);
      alert(err.message);
    }
  }
});

// === –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ ===
clearHistoryBtn.addEventListener("click", () => {
  historyTbody.innerHTML = "";
  points = [];
  setupCanvas();
  saveState();
});

// === –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
function setupCanvas() {
  resizeCanvas();
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  drawAxes();
  drawArea();
  drawPoints(); // —Ä–∏—Å—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ—á–∫–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞ points (—Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ)
}

window.addEventListener("resize", setupCanvas);

loadState();
setupCanvas();